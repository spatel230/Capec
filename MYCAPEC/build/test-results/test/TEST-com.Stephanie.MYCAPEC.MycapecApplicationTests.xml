<?xml version="1.0" encoding="UTF-8"?>
<testsuite name="com.Stephanie.MYCAPEC.MycapecApplicationTests" tests="1" skipped="0" failures="0" errors="0" timestamp="2020-04-20T20:23:14" hostname="DESKTOP-OS0ULRL" time="6.658">
  <properties/>
  <testcase name="contextLoads()" classname="com.Stephanie.MYCAPEC.MycapecApplicationTests" time="6.658"/>
  <system-out><![CDATA[16:23:12.988 [Test worker] DEBUG org.springframework.test.context.BootstrapUtils - Instantiating CacheAwareContextLoaderDelegate from class [org.springframework.test.context.cache.DefaultCacheAwareContextLoaderDelegate]
16:23:13.014 [Test worker] DEBUG org.springframework.test.context.BootstrapUtils - Instantiating BootstrapContext using constructor [public org.springframework.test.context.support.DefaultBootstrapContext(java.lang.Class,org.springframework.test.context.CacheAwareContextLoaderDelegate)]
16:23:13.102 [Test worker] DEBUG org.springframework.test.context.BootstrapUtils - Instantiating TestContextBootstrapper for test class [com.Stephanie.MYCAPEC.MycapecApplicationTests] from class [org.springframework.boot.test.context.SpringBootTestContextBootstrapper]
16:23:13.130 [Test worker] INFO org.springframework.boot.test.context.SpringBootTestContextBootstrapper - Neither @ContextConfiguration nor @ContextHierarchy found for test class [com.Stephanie.MYCAPEC.MycapecApplicationTests], using SpringBootContextLoader
16:23:13.139 [Test worker] DEBUG org.springframework.test.context.support.AbstractContextLoader - Did not detect default resource location for test class [com.Stephanie.MYCAPEC.MycapecApplicationTests]: class path resource [com/Stephanie/MYCAPEC/MycapecApplicationTests-context.xml] does not exist
16:23:13.140 [Test worker] DEBUG org.springframework.test.context.support.AbstractContextLoader - Did not detect default resource location for test class [com.Stephanie.MYCAPEC.MycapecApplicationTests]: class path resource [com/Stephanie/MYCAPEC/MycapecApplicationTestsContext.groovy] does not exist
16:23:13.141 [Test worker] INFO org.springframework.test.context.support.AbstractContextLoader - Could not detect default resource locations for test class [com.Stephanie.MYCAPEC.MycapecApplicationTests]: no resource found for suffixes {-context.xml, Context.groovy}.
16:23:13.143 [Test worker] INFO org.springframework.test.context.support.AnnotationConfigContextLoaderUtils - Could not detect default configuration classes for test class [com.Stephanie.MYCAPEC.MycapecApplicationTests]: MycapecApplicationTests does not declare any static, non-private, non-final, nested classes annotated with @Configuration.
16:23:13.201 [Test worker] DEBUG org.springframework.test.context.support.ActiveProfilesUtils - Could not find an 'annotation declaring class' for annotation type [org.springframework.test.context.ActiveProfiles] and class [com.Stephanie.MYCAPEC.MycapecApplicationTests]
16:23:13.303 [Test worker] DEBUG org.springframework.context.annotation.ClassPathScanningCandidateComponentProvider - Identified candidate component class: file [C:\Users\shrey\Documents\workspace-spring-tool-suite-4-4.5.1.RELEASE\My-Capec-master\MYCAPEC\build\classes\java\main\com\Stephanie\MYCAPEC\MycapecApplication.class]
16:23:13.306 [Test worker] INFO org.springframework.boot.test.context.SpringBootTestContextBootstrapper - Found @SpringBootConfiguration com.Stephanie.MYCAPEC.MycapecApplication for test class com.Stephanie.MYCAPEC.MycapecApplicationTests
16:23:13.562 [Test worker] DEBUG org.springframework.boot.test.context.SpringBootTestContextBootstrapper - @TestExecutionListeners is not present for class [com.Stephanie.MYCAPEC.MycapecApplicationTests]: using defaults.
16:23:13.563 [Test worker] INFO org.springframework.boot.test.context.SpringBootTestContextBootstrapper - Loaded default TestExecutionListener class names from location [META-INF/spring.factories]: [org.springframework.boot.test.autoconfigure.restdocs.RestDocsTestExecutionListener, org.springframework.boot.test.autoconfigure.web.client.MockRestServiceServerResetTestExecutionListener, org.springframework.boot.test.autoconfigure.web.servlet.MockMvcPrintOnlyOnFailureTestExecutionListener, org.springframework.boot.test.autoconfigure.web.servlet.WebDriverTestExecutionListener, org.springframework.boot.test.mock.mockito.MockitoTestExecutionListener, org.springframework.boot.test.mock.mockito.ResetMocksTestExecutionListener, org.springframework.test.context.web.ServletTestExecutionListener, org.springframework.test.context.support.DirtiesContextBeforeModesTestExecutionListener, org.springframework.test.context.support.DependencyInjectionTestExecutionListener, org.springframework.test.context.support.DirtiesContextTestExecutionListener, org.springframework.test.context.transaction.TransactionalTestExecutionListener, org.springframework.test.context.jdbc.SqlScriptsTestExecutionListener, org.springframework.test.context.event.EventPublishingTestExecutionListener]
16:23:13.584 [Test worker] DEBUG org.springframework.boot.test.context.SpringBootTestContextBootstrapper - Skipping candidate TestExecutionListener [org.springframework.test.context.web.ServletTestExecutionListener] due to a missing dependency. Specify custom listener classes or make the default listener classes and their required dependencies available. Offending class: [javax/servlet/ServletContext]
16:23:13.587 [Test worker] DEBUG org.springframework.boot.test.context.SpringBootTestContextBootstrapper - Skipping candidate TestExecutionListener [org.springframework.test.context.transaction.TransactionalTestExecutionListener] due to a missing dependency. Specify custom listener classes or make the default listener classes and their required dependencies available. Offending class: [org/springframework/transaction/interceptor/TransactionAttributeSource]
16:23:13.588 [Test worker] DEBUG org.springframework.boot.test.context.SpringBootTestContextBootstrapper - Skipping candidate TestExecutionListener [org.springframework.test.context.jdbc.SqlScriptsTestExecutionListener] due to a missing dependency. Specify custom listener classes or make the default listener classes and their required dependencies available. Offending class: [org/springframework/transaction/interceptor/TransactionAttribute]
16:23:13.588 [Test worker] INFO org.springframework.boot.test.context.SpringBootTestContextBootstrapper - Using TestExecutionListeners: [org.springframework.test.context.support.DirtiesContextBeforeModesTestExecutionListener@624f59, org.springframework.boot.test.mock.mockito.MockitoTestExecutionListener@ec2cd6, org.springframework.boot.test.autoconfigure.SpringBootDependencyInjectionTestExecutionListener@ad5a66, org.springframework.test.context.support.DirtiesContextTestExecutionListener@d81191, org.springframework.test.context.event.EventPublishingTestExecutionListener@e88c54, org.springframework.boot.test.autoconfigure.restdocs.RestDocsTestExecutionListener@1f79d03, org.springframework.boot.test.autoconfigure.web.client.MockRestServiceServerResetTestExecutionListener@16d9cb1, org.springframework.boot.test.autoconfigure.web.servlet.MockMvcPrintOnlyOnFailureTestExecutionListener@1e95894, org.springframework.boot.test.autoconfigure.web.servlet.WebDriverTestExecutionListener@11fedd1, org.springframework.boot.test.mock.mockito.ResetMocksTestExecutionListener@116bf4]
16:23:13.598 [Test worker] DEBUG org.springframework.test.context.support.AbstractDirtiesContextTestExecutionListener - Before test class: context [DefaultTestContext@3ac9af testClass = MycapecApplicationTests, testInstance = [null], testMethod = [null], testException = [null], mergedContextConfiguration = [MergedContextConfiguration@1eaadb4 testClass = MycapecApplicationTests, locations = '{}', classes = '{class com.Stephanie.MYCAPEC.MycapecApplication}', contextInitializerClasses = '[]', activeProfiles = '{}', propertySourceLocations = '{}', propertySourceProperties = '{org.springframework.boot.test.context.SpringBootTestContextBootstrapper=true}', contextCustomizers = set[org.springframework.boot.test.autoconfigure.properties.PropertyMappingContextCustomizer@0, org.springframework.boot.test.autoconfigure.web.servlet.WebDriverContextCustomizerFactory$Customizer@129270f, org.springframework.boot.test.context.filter.ExcludeFilterContextCustomizer@15bb911, org.springframework.boot.test.json.DuplicateJsonObjectContextCustomizerFactory$DuplicateJsonObjectContextCustomizer@1700542, org.springframework.boot.test.mock.mockito.MockitoContextCustomizer@0, org.springframework.boot.test.web.client.TestRestTemplateContextCustomizer@1196caf], contextLoader = 'org.springframework.boot.test.context.SpringBootContextLoader', parent = [null]], attributes = map[[empty]]], class annotated with @DirtiesContext [false] with mode [null].
16:23:13.632 [Test worker] DEBUG org.springframework.test.context.support.DependencyInjectionTestExecutionListener - Performing dependency injection for test context [[DefaultTestContext@3ac9af testClass = MycapecApplicationTests, testInstance = com.Stephanie.MYCAPEC.MycapecApplicationTests@16fbd94, testMethod = [null], testException = [null], mergedContextConfiguration = [MergedContextConfiguration@1eaadb4 testClass = MycapecApplicationTests, locations = '{}', classes = '{class com.Stephanie.MYCAPEC.MycapecApplication}', contextInitializerClasses = '[]', activeProfiles = '{}', propertySourceLocations = '{}', propertySourceProperties = '{org.springframework.boot.test.context.SpringBootTestContextBootstrapper=true}', contextCustomizers = set[org.springframework.boot.test.autoconfigure.properties.PropertyMappingContextCustomizer@0, org.springframework.boot.test.autoconfigure.web.servlet.WebDriverContextCustomizerFactory$Customizer@129270f, org.springframework.boot.test.context.filter.ExcludeFilterContextCustomizer@15bb911, org.springframework.boot.test.json.DuplicateJsonObjectContextCustomizerFactory$DuplicateJsonObjectContextCustomizer@1700542, org.springframework.boot.test.mock.mockito.MockitoContextCustomizer@0, org.springframework.boot.test.web.client.TestRestTemplateContextCustomizer@1196caf], contextLoader = 'org.springframework.boot.test.context.SpringBootContextLoader', parent = [null]], attributes = map[[empty]]]].
16:23:13.710 [Test worker] DEBUG org.springframework.test.context.support.TestPropertySourceUtils - Adding inlined properties to environment: {spring.jmx.enabled=false, org.springframework.boot.test.context.SpringBootTestContextBootstrapper=true, server.port=-1}

  .   ____          _            __ _ _
 /\\ / ___'_ __ _ _(_)_ __  __ _ \ \ \ \
( ( )\___ | '_ | '_| | '_ \/ _` | \ \ \ \
 \\/  ___)| |_)| | | | | || (_| |  ) ) ) )
  '  |____| .__|_| |_|_| |_\__, | / / / /
 =========|_|==============|___/=/_/_/_/
 :: Spring Boot ::        (v2.2.6.RELEASE)

2020-04-20 16:23:14.197  INFO 14732 --- [    Test worker] c.S.MYCAPEC.MycapecApplicationTests      : Starting MycapecApplicationTests on DESKTOP-OS0ULRL with PID 14732 (started by shrey in C:\Users\shrey\Documents\workspace-spring-tool-suite-4-4.5.1.RELEASE\My-Capec-master\MYCAPEC)
2020-04-20 16:23:14.200  INFO 14732 --- [    Test worker] c.S.MYCAPEC.MycapecApplicationTests      : No active profile set, falling back to default profiles: default
2020-04-20 16:23:14.917  INFO 14732 --- [    Test worker] c.S.MYCAPEC.MycapecApplicationTests      : Started MycapecApplicationTests in 1.204 seconds (JVM running for 3.878)
517 Attack Patterns searched.
com.sun.org.apache.xpath.internal.jaxp.XPathExpressionImpl@f66ebf
com.sun.org.apache.xpath.internal.jaxp.XPathExpressionImpl@5c15bc
com.sun.org.apache.xpath.internal.jaxp.XPathExpressionImpl@4f486c
com.sun.org.apache.xpath.internal.jaxp.XPathExpressionImpl@4a3a7a
com.sun.org.apache.xpath.internal.jaxp.XPathExpressionImpl@18c2ada
com.sun.org.apache.xpath.internal.jaxp.XPathExpressionImpl@18523a2
com.sun.org.apache.xpath.internal.jaxp.XPathExpressionImpl@1f315d6
nullAttack Pattern: 11
Name: Cause Web Server Misclassification
Description: An attack of this type exploits a Web server's decision to take action based on filename or file extension. Because different file types are handled by different server processes, misclassification may force the Web server to take unexpected action, or expected actions in an unexpected sequence. This may cause the server to exhaust resources, supply debug or system data to the attacker, or bind an attacker to a remote process. This type of vulnerability has been found in many widely used servers including IIS, Lotus Domino, and Orion. The attacker's job in this case is straightforward, standard communication protocols and methods are used and are generally appended with malicious information at the tail end of an otherwise legitimate request. The attack payload varies, but it could be special characters like a period or simply appending a tag that has a special meaning for operations on the server side like .jsp for a java application server. The essence of this attack is that the attacker deceives the server into executing functionality based on the name of the request, i.e. login.jsp, not the contents.
Likelihood Of Attack: Medium
Severity: High

Attack Pattern: 161
Name: Infrastructure Manipulation
Description: An attacker exploits characteristics of the infrastructure of a network entity in order to perpetrate attacks or information gathering on network objects or effect a change in the ordinary information flow between network objects. Most often, this involves manipulation of the routing of network messages so, instead of arriving at their proper destination, they are directed towards an entity of the attackers' choosing, usually a server controlled by the attacker. The victim is often unaware that their messages are not being processed correctly. For example, a targeted client may believe they are connecting to their own bank but, in fact, be connecting to a Pharming site controlled by the attacker which then collects the user's login information in order to hijack the actual bank account.
Likelihood Of Attack: 
Severity: High

Attack Pattern: 466
Name: Leveraging Active Man in the Middle Attacks to Bypass Same Origin Policy
Description: An attacker leverages a man in the middle attack in order to bypass the same origin policy protection in the victim's browser. This active man in the middle attack could be launched, for instance, when the victim is connected to a public WIFI hot spot. An attacker is able to intercept requests and responses between the victim's browser and some non-sensitive website that does not use TLS. For instance, the victim may be checking flight or weather information. When an attacker intercepts a response bound to the victim, an attacker adds an iFrame (which is possibly invisible) to the response referencing some domain with sensitive functionality and forwards the response to the victim. The victim's browser than automatically initiates an unauthorized request to the site with sensitive functionality. The same origin policy would prevent making these requests to a site other than the one from which the Java Script came, but the attacker once again uses active man in the middle to intercept these automatic requests and redirect them to the domain / service with sensitive functionality. Any persistent cookies that the victim has in his or her browser would be used for these unauthorized requests. The attacker thus actively directs the victim to a site with sensitive functionality. When the site with sensitive functionality responds back to the victim's request, an active man in the middle attacker intercepts these responses, injects his or her own malicious Java Script into these responses, and forwards to the victim's browser. In the victim's browser, that Java Script executes under the restrictions of the site with sensitive functionality and can essentially be used to continue to interact with the sensitive site. So an attacker can execute scripts within the victim's browser on any domains the attacker desires. The attacker is able to use this technique to steal cookies from the victim's browser for whatever site the attacker wants. This applies to both persistent cookies and HTTP only cookies (unlike traditional XSS attacks). An attacker is also able to use this technique to steal authentication credentials for sites that only encrypt the login form, but do not require a secure channel for the initial request to get to the page with the login form. Further the attacker is also able to steal any autocompletion information. This attack pattern can also be used to enable session fixation and cache poisoning attacks. Additional attacks can be enabled as well.
Likelihood Of Attack: 
Severity: Medium

Attack Pattern: 479
Name: Malicious Root Certificate
Description: An adversary exploits a weakness in authorization and installs a new root certificate on a compromised system. Certificates are commonly used for establishing secure TLS/SSL communications within a web browser. When a user attempts to browse a website that presents a certificate that is not trusted an error message will be displayed to warn the user of the security risk. Depending on the security settings, the browser may not allow the user to establish a connection to the website. Adversaries have used this technique to avoid security warnings prompting users when compromised systems connect over HTTPS to adversary controlled web servers that spoof legitimate websites in order to collect login credentials.
Likelihood Of Attack: Low
Severity: Low

Attack Pattern: 560
Name: Use of Known Domain Credentials
Description: An adversary uses stolen credentials (e.g., userid and password) to access systems managed under the same credential framework on a local network. Often, users are allowed to login to connected machines using the same password. Discovery of the password on one machine allows for lateral movement to those machines.
Likelihood Of Attack: 
Severity: 

Attack Pattern: 577
Name: Owner Footprinting
Description: An adversary exploits functionality meant to identify information about the primary users on the target system to an authorized user. They may do this, for example, by reviewing logins or file modification times. By knowing what owners use the target system, the adversary can inform further and more targeted malicious behavior. An example Windows command that may accomplish this is "dir /A ntuser.dat". Which will display the last modified time of a user's ntuser.dat file when run within the root folder of a user. This time is synonymous with the last time that user was logged in.
Likelihood Of Attack: Low
Severity: Low

Attack Pattern: 70
Name: Try Common or Default Usernames and Passwords
Description: An adversary may try certain common or default usernames and passwords to gain access into the system and perform unauthorized actions. An adversary may try an intelligent brute force using empty passwords, known vendor default credentials, as well as a dictionary of common usernames and passwords. Many vendor products come preconfigured with default (and thus well-known) usernames and passwords that should be deleted prior to usage in a production environment. It is a common mistake to forget to remove these default login credentials. Another problem is that users would pick very simple (common) passwords (e.g. "secret" or "password") that make it easier for the attacker to gain access to the system compared to using a brute force attack or even a dictionary attack using a full dictionary.
Likelihood Of Attack: Medium
Severity: High


]]></system-out>
  <system-err><![CDATA[]]></system-err>
</testsuite>
